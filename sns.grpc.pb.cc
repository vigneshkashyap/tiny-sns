// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sns.proto

#include "sns.pb.h"
#include "sns.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace csce662 {

static const char* SNSService_method_names[] = {
  "/csce662.SNSService/Login",
  "/csce662.SNSService/List",
  "/csce662.SNSService/Follow",
  "/csce662.SNSService/UnFollow",
  "/csce662.SNSService/Timeline",
};

std::unique_ptr< SNSService::Stub> SNSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSService::Stub> stub(new SNSService::Stub(channel, options));
  return stub;
}

SNSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(SNSService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(SNSService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(SNSService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnFollow_(SNSService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Timeline_(SNSService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SNSService::Stub::Login(::grpc::ClientContext* context, const ::csce662::Request& request, ::csce662::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void SNSService::Stub::async::Login(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void SNSService::Stub::async::Login(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce662::Reply>* SNSService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce662::Reply, ::csce662::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce662::Reply>* SNSService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSService::Stub::List(::grpc::ClientContext* context, const ::csce662::Request& request, ::csce662::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce662::Request, ::csce662::ListReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void SNSService::Stub::async::List(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce662::Request, ::csce662::ListReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void SNSService::Stub::async::List(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::ListReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce662::ListReply>* SNSService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce662::ListReply, ::csce662::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce662::ListReply>* SNSService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSService::Stub::Follow(::grpc::ClientContext* context, const ::csce662::Request& request, ::csce662::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void SNSService::Stub::async::Follow(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void SNSService::Stub::async::Follow(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce662::Reply>* SNSService::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce662::Reply, ::csce662::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Follow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce662::Reply>* SNSService::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSService::Stub::UnFollow(::grpc::ClientContext* context, const ::csce662::Request& request, ::csce662::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnFollow_, context, request, response);
}

void SNSService::Stub::async::UnFollow(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnFollow_, context, request, response, std::move(f));
}

void SNSService::Stub::async::UnFollow(::grpc::ClientContext* context, const ::csce662::Request* request, ::csce662::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnFollow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce662::Reply>* SNSService::Stub::PrepareAsyncUnFollowRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce662::Reply, ::csce662::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnFollow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce662::Reply>* SNSService::Stub::AsyncUnFollowRaw(::grpc::ClientContext* context, const ::csce662::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::csce662::Message, ::csce662::Message>* SNSService::Stub::TimelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::csce662::Message, ::csce662::Message>::Create(channel_.get(), rpcmethod_Timeline_, context);
}

void SNSService::Stub::async::Timeline(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::csce662::Message,::csce662::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::csce662::Message,::csce662::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_Timeline_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::csce662::Message, ::csce662::Message>* SNSService::Stub::AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce662::Message, ::csce662::Message>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::csce662::Message, ::csce662::Message>* SNSService::Stub::PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce662::Message, ::csce662::Message>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, false, nullptr);
}

SNSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce662::Request* req,
             ::csce662::Reply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce662::Request, ::csce662::ListReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce662::Request* req,
             ::csce662::ListReply* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce662::Request* req,
             ::csce662::Reply* resp) {
               return service->Follow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce662::Request, ::csce662::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce662::Request* req,
             ::csce662::Reply* resp) {
               return service->UnFollow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNSService::Service, ::csce662::Message, ::csce662::Message>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::csce662::Message,
             ::csce662::Message>* stream) {
               return service->Timeline(ctx, stream);
             }, this)));
}

SNSService::Service::~Service() {
}

::grpc::Status SNSService::Service::Login(::grpc::ServerContext* context, const ::csce662::Request* request, ::csce662::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::List(::grpc::ServerContext* context, const ::csce662::Request* request, ::csce662::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Follow(::grpc::ServerContext* context, const ::csce662::Request* request, ::csce662::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::UnFollow(::grpc::ServerContext* context, const ::csce662::Request* request, ::csce662::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::csce662::Message, ::csce662::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce662

